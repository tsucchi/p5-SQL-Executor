# NAME

SQL::Executor - Thin DBI wrapper using SQL::Maker

# SYNOPSIS

    use DBI;
    use SQL::Executor;
    my $dbh = DBI->connect($dsn, $id, $pass);
    my $ex = SQL::Executor->new($dbh);
    my @rows = $ex->select('SOME_TABLE', { id => 123 });
    $ex->insert('SOME_TABLE', { id => 124, value => 'xxxx'} );
    $ex->update('SOME_TABLE', { value => 'yyyy'}, { id => 124 } );
    $ex->delete('SOME_TABLE', { id => 124 } );

# DESCRIPTION

SQL::Executor is Thin DBI wrapper using SQL::Maker.

# METHODS

## new($dbh, $option\_href)

$dbh: Database Handler
$option\_href: option

available option is as follows

allow\_empty\_condition (BOOL default 1): allow empty condition(where) in select/delete/update

## select($table\_name, $where, $option)

select row(s). parameter is the same as select method in [SQL::Maker](http://search.cpan.org/perldoc?SQL::Maker). But array ref for filed names are not needed.
In array context, this method behaves the same as select\_all. In scalar context, this method behaves the same as select\_one

## select\_row($table\_name, $where, $option)

select only one row. parameter is the same as select method in [SQL::Maker](http://search.cpan.org/perldoc?SQL::Maker). But array ref for filed names are not needed.

## select\_all($table\_name, $where, $option)

select all rows. parameter is the same as select method in [SQL::Maker](http://search.cpan.org/perldoc?SQL::Maker). But array ref for filed names are not needed.

## select\_named($sql, $params\_href)

select row(s). In array context, this method behaves the same as select\_all\_with\_fields.
In scalar context, this method behaves the same as select\_one\_with\_fileds

You can use named placeholder in SQL like this,

    my $ex = SQL::Executor->new($dbh);
    my $row = $ex->select_named("SELECT * FROM SOME_TABLE WHERE id = :id", { id => 1234 });

## select\_row\_named($sql, $params\_href)

select only one row. You can use named placeholder in SQL like this,

    my $ex = SQL::Executor->new($dbh);
    my $row = $ex->select_row_named("SELECT * FROM SOME_TABLE WHERE id = :id", { id => 1234 });

## select\_all\_named($sql, $params\_href)

select all rows. You can use named placeholder in SQL like this,

    my $ex = SQL::Executor->new($dbh);
    my @rows = $ex->select_all_named("SELECT * FROM SOME_TABLE WHERE id = :id", { id => 1234 });

## select\_by\_sql($sql, @binds)

select row(s). In array context, this method behaves the same as select\_all\_with\_fields.
In scalar context, this method behaves the same as select\_one\_with\_fileds

    my $ex = SQL::Executor->new($dbh);
    my $row = $ex->select_by_sql("SELECT * FROM SOME_TABLE WHERE id = ?", 1234);

## select\_row\_by\_sql($sql, @binds)

select only one row.

    my $ex = SQL::Executor->new($dbh);
    my $row = $ex->select_row_by_sql("SELECT * FROM SOME_TABLE WHERE id = ?", 1234);

## select\_all\_by\_sql($sql, @binds)

select all rows.

    my $ex = SQL::Executor->new($dbh);
    my @rows = $ex->select_all_by_sql("SELECT * FROM SOME_TABLE WHERE id = ?", 1234);

## select\_with\_fields($table\_name, $fields\_aref, $where, $option)

select row(s). parameter is the same as select method in [SQL::Maker](http://search.cpan.org/perldoc?SQL::Maker). 
In array context, this method behaves the same as select\_all\_with\_fields.
In scalar context, this method behaves the same as select\_one\_with\_fileds

## select\_row\_with\_fields($table\_name, $fields\_aref, $where, $option)

select only one row. parameter is the same as select method in [SQL::Maker](http://search.cpan.org/perldoc?SQL::Maker).

## select\_all\_with\_fields($table\_name, $fields\_aref, $where, $option)

select all rows. parameter is the same as select method in [SQL::Maker](http://search.cpan.org/perldoc?SQL::Maker). But array ref for filed names are not needed.

## insert($table\_name, $values)

Do INSERT statement. parameter is the same as select method in [SQL::Maker](http://search.cpan.org/perldoc?SQL::Maker).

## insert\_multi($table\_name, @args)

Do INSERT-multi statement using [SQL::Maker::Plugin::InsertMulti](http://search.cpan.org/perldoc?SQL::Maker::Plugin::InsertMulti).

## delete($table\_name, $where)

Do DELETE statement. parameter is the same as select method in [SQL::Maker](http://search.cpan.org/perldoc?SQL::Maker).

## update($table\_name, $set, $where)

Do UPDATE statement. parameter is the same as select method in [SQL::Maker](http://search.cpan.org/perldoc?SQL::Maker).

## execute\_query($sql, @binds)

execute DML query

# AUTHOR

Takuya Tsuchida <tsucchi {at} cpan.org>

# SEE ALSO

[DBI](http://search.cpan.org/perldoc?DBI), [SQL::Maker](http://search.cpan.org/perldoc?SQL::Maker), [DBIx::Simple](http://search.cpan.org/perldoc?DBIx::Simple)

Codes for named placeholder is taken from [Teng](http://search.cpan.org/perldoc?Teng)'s search\_named.

# LICENSE

Copyright (C) Takuya Tsuchida

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
